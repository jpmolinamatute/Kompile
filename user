#!/usr/bin/env bash

# TODO: merge user.sh and root.file
# FIXME: run 'make xconfig' as root but in a regular user session. Right now when running this command as root get Display not found error
# TODO: validate config file loaded by the user
# TODO: implement verbose option
# TODO: implement lspci -k, lsmod and other command in helpful fashion so that the user knows what modules must keep
# TODO: remove code scepecific to my needs
THISSCRIPT="$0"
BUILDDIR=
TARGETDIR=
configFound=1
export CHOST="x86_64-pc-linux-gnu"
export CFLAGS="-march=native -O2 -pipe -msse3"
export CXXFLAGS="${CFLAGS}"
RUNXCONFIG="false"
cpuno=$(grep -Pc "processor\t:" /proc/cpuinfo)
# cpuno=$(($cpuno + 1))

vercomp () {
    # FROM https://stackoverflow.com/questions/4023830/how-compare-two-strings-in-dot-separated-version-format-in-bash
    # thanks Dennis Williamson
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

shouldRunOldConfig () {
    local currentVersion="$1"
    local oldVersion="$(grep -E "# Linux/x86 [45]\.[0-9]{1,2}\.[0-9]{1,2} Kernel Configuration" ${BUILDDIR}/.config | grep -Eo "[45]\.[0-9]{1,2}\.[0-9]{1,2}")"
    vercomp $currentVersion $oldVersion
    return $?
}

exitWithError () {
    local COLOR='\033[0;31m'
    local NC='\033[0m'
    echo -e "${COLOR}ERROR: $1${NC}"
    exit 2
}

printLine (){
    local COLOR='\033[1;32m'
    local NC='\033[0m'
    echo -e "${COLOR}==>    $1${NC}"
}

checkDirectory(){
    local dir=$1
    if [[ ${dir: -1} == "/" ]]; then
        local dir=${dir::${#dir}-1}
    fi

    if [[ ! -d $dir ]]; then
        exitWithError "Directory $dir doesn\'t exists"
    fi
    echo $dir
}

refineKernelName (){
    local ver="$1"
    local kernelPath="/boot/vmlinuz-${ver}-${KERNELNAME}"

    if [[ -f $kernelPath ]]; then
        printLine "A Kernel ${name} was found!. Do you want to Replace it or Increment it (r, i)"
        read answer

        if [[ $answer == "i" || $answer == "I" ]]; then
            local FILES="${kernelPath}*"
            for f in $FILES
            do
                trackversion=$(cut -d'-' -f4 <<<$f)
            done
            echo "First $trackversion"
            if [[ -z $trackversion ]]; then
                local trackversion=1
            else
                local trackversion=$(($trackversion + 1))
            fi
            echo "Second $trackversion"
            KERNELNAME="${KERNELNAME}-${trackversion}"
        fi
    fi
}

usage(){
    cat >&2 <<EOF
    Usage: $THISSCRIPT [options]

    Options:
      --help                      : This output.
      --edit                      : Either or not to run GUI tool to modify config file.
      --download                  : Either or not to download the kernel sources.
      --build PATH                : Building directory. This directory is where hearder will be saved
                                    and the kernel will be built.
      --target PATH               : Target directory. This directory is where the kernel sources are
                                    saved.
      --name NAME                 : How you want to name this kernel.
      --file PATH                 : Path to a config file.
      --backup                    : Path to save config file
EOF
}

downloadKernel (){
    local html="$(wget --output-document - --quiet https://www.kernel.org/ | grep -A 1 "latest_link")"
    local kernelName="$(echo $html | grep -Eo "linux-[4-9]\.[0-9]+\.?[0-9]*\.tar\.xz")"
    local mayorVersion="$(echo $kernelName | cut -d'-' -f2 | cut -d'.' -f1)"
    local version="$(echo $kernelName | grep -Eo "linux-[4-9]\.[0-9]+\.?[0-9]")"
    printLine "Downloading latest Linux Kernel: version found ${kernelName}"
    wget --https-only https://cdn.kernel.org/pub/linux/kernel/v${mayorVersion}.x/${kernelName} -O /usr/src/${kernelName}
    if [[ $? -ne 0 ]]; then
        exitWithError "Downloading ${kernelName} failed"
    fi
    printLine "Untaring ${kernelName} failed"
    tar -xf /usr/src/${kernelName} -C /usr/src
    if [[ $? -ne 0 ]]; then
        exitWithError "Untaring ${kernelName} failed"
    fi

    TARGETDIR="/usr/src/${version}"
}

if [[ $EUID -ne 0 ]]; then
    exitWithError "This script must be run as root"
fi


while [ $# -gt 0 ]; do
    case "$1" in
    "--help")
        usage
        exit 0
        ;;
    "--verbose")
        shift
        # LoggedOut "Turned on verbose output."
        VERBOSE=1
        ;;
    "--edit")
        shift
        # LoggedOut "Turned on verbose output."
        RUNXCONFIG="true"
        ;;
    "--download")
        shift
        downloadKernel
        ;;
    "--build")
        shift
        printLine "Checking if $1 is a valid directory"
        BUILDDIR="$(checkDirectory "$1")"
        shift
        ;;
    "--backup")
        shift
        printLine "Checking if $1 is a valid directory"
        TOSAVECONFIG="$(checkDirectory "$1")"
        shift
        ;;
    "--target")
        shift
        printLine "Checking if $1 is a valid directory"
        TARGETDIR="$(checkDirectory "$1")"
        shift
        ;;
    "--name")
        shift
        KERNELNAME="$1"
        shift
        ;;
    "--file")
        shift
        CONFIGFILE="$1"
        shift
        ;;
    *)
        exitWithError "Unknown command-line option $1"
        ;;
    esac
done

if [[ -z $TARGETDIR ]]; then
    exitWithError "--target is undefined"
fi

if [[ -z $BUILDDIR ]]; then
    exitWithError "--build is undefined"
fi

cd $TARGETDIR
VERSION="$(make -s kernelversion 2> /dev/null)"

if [[ -n $KERNELNAME ]]; then
    refineKernelName ${VERSION}
else
    exitWithError "A name for the kernel is needed"
fi

KERNELVERSION="${VERSION}-${KERNELNAME}"
BUILDDIR="${BUILDDIR}/${KERNELVERSION}"

if [[ -d $BUILDDIR ]]; then
    printLine "make O=$BUILDDIR distclean"
    make -j $cpuno V=0 O=$BUILDDIR distclean 1> /dev/null 2>> ${BUILDDIR}/Error
else
    printLine "mkdir ${BUILDDIR}"
    mkdir ${BUILDDIR}
fi


if [[ -f $CONFIGFILE ]]; then
    printLine "Config file found: ${CONFIGFILE}"
    cp $CONFIGFILE ${BUILDDIR}/.config
else
    zcat --version > /dev/null 2>&1
    if [[ $? -eq 0 &&  -f /proc/config.gz ]]; then
        printLine "zcat /proc/config.gz > ${BUILDDIR}/.config"
        zcat /proc/config.gz > ${BUILDDIR}/.config
    elif [[ -f /boot/config* ]]; then
        exitWithError "CODE ME, please! I beg you."
        # get the highest config file from all and then cat it to ${BUILDDIR}/.config"
    else
        exitWithError "We couldn't find a config file to use."
        configFound=0
    fi
fi

if [[ $configFound -eq 1 ]]; then
    shouldRunOldConfig $VERSION
    versionValidation=$?
    if [[ $versionValidation -eq 1 ]]; then
        printLine "make -j $cpuno V=0 O=${BUILDDIR} olddefconfig"
        make -j $cpuno V=0 O=${BUILDDIR} olddefconfig 1> /dev/null 2>> ${BUILDDIR}/Error
    elif [[ $versionValidation -eq 2 ]]; then
        exitWithError "You are downgrading your kernel, this is not supported"
    fi
    if [[ $RUNXCONFIG == "true" ]]; then
        whatToRun="${whatToRun} menuconfig"
    fi
else
    whatToRun="menuconfig"
    printLine "make -j $cpuno V=0 O=${BUILDDIR} defconfig"
    make -j $cpuno V=0 O=${BUILDDIR} defconfig 1> /dev/null 2>> ${BUILDDIR}/Error
fi

sed -Ei "s/^CONFIG_LOCALVERSION=\"[a-z0-9-]*\"$/CONFIG_LOCALVERSION=\"-${KERNELNAME}\"/" ${BUILDDIR}/.config
whatToRun="${whatToRun} all"

printLine "make -j $cpuno V=0 O=${BUILDDIR} $whatToRun"
make -j $cpuno V=0 O=${BUILDDIR} $whatToRun 2>> ${BUILDDIR}/Error
if [[ $? -ne 0 ]]; then
    exitWithError "This command \"make -j $cpuno V=0 O=${BUILDDIR} $whatToRun\" failed"
fi

if [[ -d $TOSAVECONFIG ]]; then
    printLine "Saving ${BUILDDIR}/.config to $TOSAVECONFIG/config-${KERNELVERSION}"
    cp --remove-destination ${BUILDDIR}/.config $TOSAVECONFIG/config-${KERNELVERSION}
fi

if [[ -d /usr/lib/modules/${KERNELVERSION} ]]; then
    printLine "Removing /usr/lib/modules/${KERNELVERSION} directory"
    rm -rf /usr/lib/modules/${KERNELVERSION}
fi

printLine "make -j $cpuno V=0 O=${BUILDDIR} modules_install headers_install"
make -j $cpuno V=0 O=${BUILDDIR} modules_install headers_install 1> /dev/null 2>> ${BUILDDIR}/Error
if [[ $? -ne 0 ]]; then
    exitWithError "This command \"make -j $cpuno V=0 O=${BUILDDIR} modules_install headers_install\" failed"
fi

printLine "Calling /home/juanpa/Projects/compile/root ${KERNELVERSION} ${BUILDDIR}"
/home/juanpa/Projects/compile/root ${KERNELVERSION} ${BUILDDIR}
if [[ $? -ne 0 ]]; then
    exitWithError "This command \"/home/juanpa/Projects/compile/root ${KERNELVERSION} ${BUILDDIR}\" failed"
fi

printLine "Kernel ${KERNELVERSION} was successfully installed"
printLine "Bye!"
exit 0
